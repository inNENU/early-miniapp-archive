import * as ESTree from 'estree';
import Scope from './scope';
import { EvaluateMap } from './evaluate';
export interface EnvironmentExtra {
    isConstructor?: boolean;
    isMethod?: boolean;
    isStaticMethod?: boolean;
    SuperClass?: Function;
}
export interface EvaluateOptions {
    scope?: Scope;
    label?: string;
    extra?: EnvironmentExtra;
}
export default class Environment<T> {
    scope: Scope;
    node: T;
    evaluateMap: EvaluateMap;
    label?: string;
    extra?: EnvironmentExtra;
    constructor(node: T, scope: Scope, evaluateMap: EvaluateMap);
    evaluate(node: ESTree.Node, opts?: EvaluateOptions): any;
    createBlockScope(invasive?: boolean): Scope;
    createFunctionScope(invasive?: boolean): Scope;
}
