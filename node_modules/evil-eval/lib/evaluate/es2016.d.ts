import * as ESTree from 'estree';
import { Value } from '../value';
import Environment from '../environment';
export declare const BinaryExpressionOperatorEvaluateMap: {
    '**': (a: any, b: any) => number;
    '==': (a: any, b: any) => boolean;
    '!=': (a: any, b: any) => boolean;
    '===': (a: any, b: any) => boolean;
    '!==': (a: any, b: any) => boolean;
    '<': (a: any, b: any) => boolean;
    '<=': (a: any, b: any) => boolean;
    '>': (a: any, b: any) => boolean;
    '>=': (a: any, b: any) => boolean;
    '<<': (a: any, b: any) => number;
    '>>': (a: any, b: any) => number;
    '>>>': (a: any, b: any) => number;
    '+': (a: any, b: any) => any;
    '-': (a: any, b: any) => number;
    '*': (a: any, b: any) => number;
    '/': (a: any, b: any) => number;
    '%': (a: any, b: any) => number;
    '|': (a: any, b: any) => number;
    '^': (a: any, b: any) => number;
    '&': (a: any, b: any) => number;
    'in': (a: any, b: any) => boolean;
    'instanceof': (a: any, b: any) => boolean;
};
export declare function BinaryExpression(env: Environment<ESTree.BinaryExpression>): any;
export declare const AssignmentExpressionOperatorEvaluateMap: {
    '**=': (value: Value, v: any) => number;
    '=': (value: Value, v: any) => any;
    '+=': (value: Value, v: any) => any;
    '-=': (value: Value, v: any) => number;
    '*=': (value: Value, v: any) => number;
    '/=': (value: Value, v: any) => number;
    '%=': (value: Value, v: any) => number;
    '<<=': (value: Value, v: any) => number;
    '>>=': (value: Value, v: any) => number;
    '>>>=': (value: Value, v: any) => number;
    '|=': (value: Value, v: any) => number;
    '^=': (value: Value, v: any) => number;
    '&=': (value: Value, v: any) => number;
};
export declare function AssignmentExpression(env: Environment<ESTree.AssignmentExpression>): any;
