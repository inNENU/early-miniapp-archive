import * as ESTree from 'estree';
import Signal from '../signal';
import Environment from '../environment';
export declare function ExpressionStatement(env: Environment<ESTree.ExpressionStatement>): any;
export declare function BlockStatement(env: Environment<ESTree.BlockStatement>): Signal | undefined;
export declare function VariableDeclaration(env: Environment<ESTree.VariableDeclaration>): void;
export declare function ArrayExpression(env: Environment<ESTree.ArrayExpression>): any[];
export declare function ObjectExpression(env: Environment<ESTree.ObjectExpression>): {
    [key: string]: any;
};
export declare function FunctionExpression(env: Environment<ESTree.FunctionExpression>): (this: any) => any;
export declare function CallExpression(env: Environment<ESTree.CallExpression>): any;
export declare function ForOfStatement(env: Environment<ESTree.ForOfStatement>): Signal | undefined;
export declare function Super(env: Environment<ESTree.Super>): any;
/**
 * see: ArrayExpression
 */
export declare function SpreadElement(env: Environment<ESTree.SpreadElement>): void;
export declare function ArrowFunctionExpression(env: Environment<ESTree.ArrowFunctionExpression>): (this: any) => any;
export declare function YieldExpression(env: Environment<ESTree.YieldExpression>): void;
export declare function TemplateLiteral(env: Environment<ESTree.TemplateLiteral>): void;
export declare function TaggedTemplateExpression(env: Environment<ESTree.TaggedTemplateExpression>): void;
export declare function TemplateElement(env: Environment<ESTree.TemplateElement>): void;
export declare function ObjectPattern(env: Environment<ESTree.ObjectPattern>): void;
export declare function ArrayPattern(env: Environment<ESTree.ArrayPattern>): void;
export declare function RestElement(env: Environment<ESTree.RestElement>): void;
export declare function AssignmentPattern(env: Environment<ESTree.AssignmentPattern>): void;
export declare function ClassBody(env: Environment<ESTree.ClassBody>): Function;
/**
 * see: ClassBody
 */
export declare function MethodDefinition(env: Environment<ESTree.MethodDefinition>): void;
export declare function ClassDeclaration(env: Environment<ESTree.ClassDeclaration>): any;
export declare function ClassExpression(env: Environment<ESTree.ClassExpression>): any;
export declare function MetaProperty(env: Environment<ESTree.MetaProperty>): void;
export declare function ImportDeclaration(env: Environment<ESTree.ImportDeclaration>): void;
export declare function ImportSpecifier(env: Environment<ESTree.ImportSpecifier>): void;
export declare function ImportDefaultSpecifier(env: Environment<ESTree.ImportDefaultSpecifier>): void;
export declare function ImportNamespaceSpecifier(env: Environment<ESTree.ImportNamespaceSpecifier>): void;
export declare function ExportNamedDeclaration(env: Environment<ESTree.ExportNamedDeclaration>): void;
export declare function ExportSpecifier(env: Environment<ESTree.ExportSpecifier>): void;
export declare function ExportDefaultDeclaration(env: Environment<ESTree.ExportDefaultDeclaration>): void;
export declare function ExportAllDeclaration(env: Environment<ESTree.ExportAllDeclaration>): void;
