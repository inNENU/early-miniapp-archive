"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const value_1 = require("./value");
class Scope {
    constructor(type, outer) {
        this.invasive = false;
        this.declaration = Object.create(null);
        this.type = type;
        this.outer = outer;
    }
    get(name, autoDeclare = false) {
        if (this.declaration[name]) {
            return this.declaration[name];
        }
        else if (this.outer) {
            return this.outer.get(name, autoDeclare);
        }
        else {
            const value = this.sandbox.get(name, autoDeclare);
            if (value) {
                return value;
            }
        }
        throw new ReferenceError(`${name} is not defined`);
    }
    declare(name, value, kind = 'var') {
        if (kind === 'var') {
            return this.varDeclare(name, value);
        }
        else if (kind === 'let') {
            return this.letDeclare(name, value);
        }
        else if (kind === 'const') {
            return this.constDeclare(name, value);
        }
        else {
            throw new Error('evil-eval: Invalid Variable Declaration Kind');
        }
    }
    varDeclare(name, value) {
        let scope = this;
        while (scope.outer && scope.type !== 'function') {
            scope = scope.outer;
        }
        this.declaration[name] = value_1.createSimpleValue(value, 'var');
        return this.declaration[name];
    }
    letDeclare(name, value) {
        if (this.declaration[name]) {
            throw new SyntaxError(`Identifier '${name}' has already been declared`);
        }
        this.declaration[name] = value_1.createSimpleValue(value, 'let');
        return this.declaration[name];
    }
    constDeclare(name, value, override = false) {
        if (!override && this.declaration[name]) {
            throw new SyntaxError(`Identifier '${name}' has already been declared`);
        }
        this.declaration[name] = value_1.createSimpleValue(value, 'const');
        return this.declaration[name];
    }
}
exports.default = Scope;
//# sourceMappingURL=scope.js.map