"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var wxpage_1 = require("wxpage");
var setpage_1 = require("../utils/setpage");
var tab_1 = require("../utils/tab");
var a = getApp().globalData;
var includePoint1 = {
    padding: [30, 20, 30, 20],
    points: [
        { latitude: 43.8578480844, longitude: 125.3252720833 },
        { latitude: 43.8633404949, longitude: 125.3379964828 }
    ]
};
var includePoint2 = {
    padding: [30, 20, 30, 20],
    points: [
        { latitude: 43.8256570334, longitude: 125.4175829887 },
        { latitude: 43.8247281876, longitude: 125.4359936714 }
    ]
};
wxpage_1.default('map', {
    data: {
        nm: a.nm,
        map: {
            latitude: 43.862007982140646,
            longitude: 125.33405307523934,
            scale: 17
        },
        list: false,
        pointDisplay: false,
        closeTop: -31,
        selectBottom: 0,
        selectItem: 'all',
        category: [
            ['全部', 'all'],
            ['校门', 'gate'],
            ['学院', 'school'],
            ['建筑', 'buildings'],
            ['寝室', 'dormitory'],
            ['设施', 'facility'],
            ['运动场', 'sportsField'],
            ['风景', 'scenery']
        ]
    },
    onNavigate: function () {
        console.log('将要跳转Map');
        tab_1.default.markerSet();
        a.marker = this.getMarker();
    },
    onLoad: function () {
        var _this = this;
        wx.showLoading({ title: '加载中...' });
        tab_1.default.markerSet();
        var _a = a.marker ? a.marker : this.getMarker(), mapSwitch = _a.mapSwitch, markers = _a.markers;
        delete a.marker;
        this.setData({
            mapSwitch: mapSwitch,
            markers: markers,
            info: a.info,
            mapStyle: a.nm ? '46NBZ-EJ6C4-4REUO-XR7ZR-CWLG5-T3BDA' : 'PZGBZ-74N6F-KVYJ5-NRJDH-Y3NUT-IKFLF',
            nm: a.nm
        });
        this.mapCtx = wx.createMapContext('schoolMap');
        this.mapCtx.includePoints(mapSwitch ? includePoint1 : includePoint2);
        setTimeout(function () {
            _this.mapCtx.getScale({
                success: function (r1) {
                    _this.mapCtx.getCenterLocation({
                        success: function (r2) {
                            _this.setData({ map: { scale: r1.scale, latitude: r2.latitude, longitude: r2.longitude } });
                        }
                    });
                }
            });
            wx.hideLoading();
        }, 500);
        setpage_1.default.Notice('map');
    },
    onShow: function () {
        var _a = setpage_1.default.color(false), nc = _a.nc, bc = _a.bc;
        wx.setNavigationBarColor(nc);
        wx.setBackgroundColor(bc);
    },
    onReady: function () {
        var _this = this;
        wx.createSelectorQuery().select('#mapTab')
            .boundingClientRect(function (rect) {
            _this.setData({ tabHeight: rect.height });
        })
            .exec();
    },
    getMarker: function () {
        var value = wx.getStorageSync('mapSwitch');
        var mapSwitch = value || value === false ? value : (wx.setStorageSync('mapSwitch', true), true);
        var markers = wx.getStorageSync(mapSwitch ? 'benbu-all' : 'jingyue-all');
        return { mapSwitch: mapSwitch, markers: markers };
    },
    Switch: function () {
        var _this = this;
        var temp = !this.data.mapSwitch;
        var markers = wx.getStorageSync(temp ? 'benbu-all' : 'jingyue-all');
        this.setData({
            mapSwitch: temp,
            markers: markers
        });
        this.mapCtx = wx.createMapContext('schoolMap');
        this.mapCtx.includePoints(temp ? includePoint1 : includePoint2);
        setTimeout(function () {
            _this.mapCtx.getScale({
                success: function (r1) {
                    _this.mapCtx.getCenterLocation({
                        success: function (r2) {
                            _this.setData({ map: { scale: r1.scale, latitude: r2.latitude, longitude: r2.longitude } });
                        }
                    });
                }
            });
        }, 500);
        wx.setStorageSync('mapSwitch', temp);
    },
    scale: function (e) {
        var _this = this;
        this.mapCtx.getCenterLocation({
            success: function (r2) {
                _this.setData({
                    map: {
                        scale: _this.data.map.scale + (e.currentTarget.dataset.action === 'enlarge' ? 1 : -1),
                        latitude: r2.latitude, longitude: r2.longitude
                    }
                });
            }
        });
    },
    moveToLocation: function () {
        this.mapCtx.moveToLocation();
    },
    point: function () {
        var _this = this;
        if (this.data.pointDisplay) {
            this.setData({ pointDisplay: !this.data.pointDisplay });
            setTimeout(function () {
                _this.setData({ selectBottom: a.info.screenHeight / a.info.screenWidth * 750 });
            }, 500);
        }
        else
            this.setData({
                pointDisplay: !this.data.pointDisplay,
                selectBottom: 190
            });
    },
    select: function (e) {
        var name = this.data.mapSwitch ? 'benbu' : 'jingyue';
        var current = e.target.dataset.category;
        var markers = wx.getStorageSync(name + "-" + current);
        this.setData({ markers: markers, selectItem: current });
        this.mapCtx.includePoints({ padding: [30, 20, 30, 20], points: markers });
    },
    markers: function (e) {
        var mapSwitch = this.data.mapSwitch;
        var xiaoqu = mapSwitch ? 'benbu' : 'jingyue';
        if (e.type === 'markertap')
            this.$preload("situs?xiaoqu=" + xiaoqu + "&aim=" + (xiaoqu + e.markerId));
        else if (e.type === 'callouttap')
            this.$route("/function/situs?xiaoqu=" + xiaoqu + "&aim=" + (xiaoqu + e.markerId));
    },
    showList: function () {
        var _this = this;
        if (this.data.list) {
            this.setData({ list: !this.data.list });
            setTimeout(function () {
                _this.setData({ closeTop: -31 });
            }, 500);
        }
        else
            this.setData({
                list: !this.data.list,
                closeTop: a.info.statusBarHeight + 5.5
            });
    },
    back: function () {
        wx.navigateBack({});
    },
    regionChange: function (e) {
        console.log('regionChange', e);
    },
    update: function (e) {
        console.log('update', e);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBT0EsaUNBQStCO0FBQy9CLDRDQUFxQztBQUNyQyxvQ0FBZ0M7QUFDeEIsSUFBQSx1QkFBYSxDQUFjO0FBRW5DLElBQU0sYUFBYSxHQUFHO0lBQ3BCLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUN6QixNQUFNLEVBQUU7UUFDTixFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRTtRQUN0RCxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRTtLQUN2RDtDQUNGLENBQUM7QUFDRixJQUFNLGFBQWEsR0FBRztJQUNwQixPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7SUFDekIsTUFBTSxFQUFFO1FBQ04sRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUU7UUFDdEQsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUU7S0FDdkQ7Q0FDRixDQUFDO0FBRUYsZ0JBQVMsQ0FBQyxLQUFLLEVBQUU7SUFDZixJQUFJLEVBQUU7UUFDSixFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUU7UUFDUixHQUFHLEVBQUU7WUFDSCxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFNBQVMsRUFBRSxrQkFBa0I7WUFDN0IsS0FBSyxFQUFFLEVBQUU7U0FDVjtRQUNELElBQUksRUFBRSxLQUFLO1FBQ1gsWUFBWSxFQUFFLEtBQUs7UUFDbkIsUUFBUSxFQUFFLENBQUMsRUFBRTtRQUNiLFlBQVksRUFBRSxDQUFDO1FBQ2YsVUFBVSxFQUFFLEtBQUs7UUFDakIsUUFBUSxFQUFFO1lBQ1IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDO1lBQ2IsQ0FBQyxJ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bnQiOlsiLypcbiAqIEBBdXRob3I6IE1yLkhvcGVcbiAqIEBEYXRlOiAyMDE5LTA2LTI0IDIxOjEyOjEzXG4gKiBATGFzdEVkaXRvcnM6IE1yLkhvcGVcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMDYtMjQgMjM6NDA6MzJcbiAqIEBEZXNjcmlwdGlvbjog5Zyw5Zu+XG4gKi9cbmltcG9ydCAkcmVnaXN0ZXIgZnJvbSAnd3hwYWdlJztcbmltcG9ydCAkcGFnZSBmcm9tICcuLi91dGlscy9zZXRwYWdlJztcbmltcG9ydCAkdGFiIGZyb20gJy4uL3V0aWxzL3RhYic7XG5jb25zdCB7IGdsb2JhbERhdGE6IGEgfSA9IGdldEFwcCgpO1xuXG5jb25zdCBpbmNsdWRlUG9pbnQxID0ge1xuICBwYWRkaW5nOiBbMzAsIDIwLCAzMCwgMjBdLFxuICBwb2ludHM6IFtcbiAgICB7IGxhdGl0dWRlOiA0My44NTc4NDgwODQ0LCBsb25naXR1ZGU6IDEyNS4zMjUyNzIwODMzIH0sXG4gICAgeyBsYXRpdHVkZTogNDMuODYzMzQwNDk0OSwgbG9uZ2l0dWRlOiAxMjUuMzM3OTk2NDgyOCB9XG4gIF1cbn07XG5jb25zdCBpbmNsdWRlUG9pbnQyID0ge1xuICBwYWRkaW5nOiBbMzAsIDIwLCAzMCwgMjBdLFxuICBwb2ludHM6IFtcbiAgICB7IGxhdGl0dWRlOiA0My44MjU2NTcwMzM0LCBsb25naXR1ZGU6IDEyNS40MTc1ODI5ODg3IH0sXG4gICAgeyBsYXRpdHVkZTogNDMuODI0NzI4MTg3NiwgbG9uZ2l0dWRlOiAxMjUuNDM1OTkzNjcxNCB9XG4gIF1cbn07XG5cbiRyZWdpc3RlcignbWFwJywge1xuICBkYXRhOiB7XG4gICAgbm06IGEubm0sXG4gICAgbWFwOiB7XG4gICAgICBsYXRpdHVkZTogNDMuODYyMDA3OTgyMTQwNjQ2LFxuICAgICAgbG9uZ2l0dWRlOiAxMjUuMzM0MDUzMDc1MjM5MzQsXG4gICAgICBzY2FsZTogMTdcbiAgICB9LFxuICAgIGxpc3Q6IGZhbHNlLFxuICAgIHBvaW50RGlzcGxheTogZmFsc2UsXG4gICAgY2xvc2VUb3A6IC0zMSxcbiAgICBzZWxlY3RCb3R0b206IDAsXG4gICAgc2VsZWN0SXRlbTogJ2FsbCcsXG4gICAgY2F0ZWdvcnk6IFtcbiAgICAgIFsn5YWo6YOoJywgJ2FsbCddLFxuICAgICAgWyfmoKHpl6gnLCAnZ2F0ZSddLFxuICAgICAgWyflrabpmaInLCAnc2Nob29sJ10sXG4gICAgICBbJ+W7uuetkScsICdidWlsZGluZ3MnXSxcbiAgICAgIFsn5a+d5a6kJywgJ2Rvcm1pdG9yeSddLFxuICAgICAgWyforr7mlr0nLCAnZmFjaWxpdHknXSxcbiAgICAgIFsn6L+Q5Yqo5Zy6JywgJ3Nwb3J0c0ZpZWxkJ10sXG4gICAgICBbJ+mjjuaZrycsICdzY2VuZXJ5J11cbiAgICBdXG4gIH0sXG4gIG9uTmF2aWdhdGUoKSB7XG4gICAgY29uc29sZS5sb2coJ+Wwhuimgei3s+i9rE1hcCcpO1xuICAgICR0YWIubWFya2VyU2V0KCk7XG4gICAgYS5tYXJrZXIgPSB0aGlzLmdldE1hcmtlcigpO1xuICB9LFxuICBvbkxvYWQoKSB7XG4gICAgd3guc2hvd0xvYWRpbmcoeyB0aXRsZTogJ+WKoOi9veS4rS4uLicgfSk7XG5cbiAgICAkdGFiLm1hcmtlclNldCgpO1xuXG4gICAgY29uc3QgeyBtYXBTd2l0Y2gsIG1hcmtlcnMgfSA9IGEubWFya2VyID8gYS5tYXJrZXIgOiB0aGlzLmdldE1hcmtlcigpO1xuXG4gICAgZGVsZXRlIGEubWFya2VyO1xuXG4gICAgdGhpcy5zZXREYXRhISh7XG4gICAgICBtYXBTd2l0Y2gsXG4gICAgICBtYXJrZXJzLFxuICAgICAgaW5mbzogYS5pbmZvLFxuICAgICAgbWFwU3R5bGU6IGEubm0gPyAnNDZOQlotRUo2QzQtNFJFVU8tWFI3WlItQ1dMRzUtVDNCREEnIDogJ1BaR0JaLTc0TjZGLUtWWUo1LU5SSkRILVkzTlVULUlLRkxGJyxcbiAgICAgIG5tOiBhLm5tXG4gICAgfSk7XG4gICAgdGhpcy5tYXBDdHggPSB3eC5jcmVhdGVNYXBDb250ZXh0KCdzY2hvb2xNYXAnKTtcbiAgICB0aGlzLm1hcEN0eC5pbmNsdWRlUG9pbnRzKG1hcFN3aXRjaCA/IGluY2x1ZGVQb2ludDEgOiBpbmNsdWRlUG9pbnQyKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMubWFwQ3R4LmdldFNjYWxlKHtcbiAgICAgICAgc3VjY2VzczogKHIxOiBhbnkpID0+IHtcbiAgICAgICAgICB0aGlzLm1hcEN0eC5nZXRDZW50ZXJMb2NhdGlvbih7XG4gICAgICAgICAgICBzdWNjZXNzOiAocjI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnNldERhdGEhKHsgbWFwOiB7IHNjYWxlOiByMS5zY2FsZSwgbGF0aXR1ZGU6IHIyLmxhdGl0dWRlLCBsb25naXR1ZGU6IHIyLmxvbmdpdHVkZSB9IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHd4LmhpZGVMb2FkaW5nKCk7XG4gICAgfSwgNTAwKTtcblxuICAgIC8vIOW8ueWHuumAmuefpVxuICAgICRwYWdlLk5vdGljZSgnbWFwJyk7XG4gIH0sXG4gIG9uU2hvdygpIHtcbiAgICAvLyDorr7nva7og7blm4rlkozog4zmma/popzoibJcbiAgICBjb25zdCB7IG5jLCBiYyB9ID0gJHBhZ2UuY29sb3IoZmFsc2UpO1xuXG4gICAgd3guc2V0TmF2aWdhdGlvbkJhckNvbG9yKG5jKTtcbiAgICB3eC5zZXRCYWNrZ3JvdW5kQ29sb3IoYmMpO1xuICB9LFxuICBvblJlYWR5KCkge1xuICAgIC8vIOiuvue9rnRhYlxuICAgIHd4LmNyZWF0ZVNlbGVjdG9yUXVlcnkoKS5zZWxlY3QoJyNtYXBUYWInKVxuICAgICAgLmJvdW5kaW5nQ2xpZW50UmVjdChyZWN0ID0+IHtcbiAgICAgICAgdGhpcy5zZXREYXRhISh7IHRhYkhlaWdodDogcmVjdC5oZWlnaHQgfSk7XG4gICAgICB9KVxuICAgICAgLmV4ZWMoKTtcbiAgfSxcbiAgZ2V0TWFya2VyKCkge1xuICAgIGNvbnN0IHZhbHVlID0gd3guZ2V0U3RvcmFnZVN5bmMoJ21hcFN3aXRjaCcpO1xuICAgIGNvbnN0IG1hcFN3aXRjaCA9IHZhbHVlIHx8IHZhbHVlID09PSBmYWxzZSA/IHZhbHVlIDogKHd4LnNldFN0b3JhZ2VTeW5jKCdtYXBTd2l0Y2gnLCB0cnVlKSwgdHJ1ZSk7XG4gICAgY29uc3QgbWFya2VycyA9IHd4LmdldFN0b3JhZ2VTeW5jKG1hcFN3aXRjaCA/ICdiZW5idS1hbGwnIDogJ2ppbmd5dWUtYWxsJyk7XG5cbiAgICByZXR1cm4geyBtYXBTd2l0Y2gsIG1hcmtlcnMgfTtcbiAgfSxcbiAgU3dpdGNoKCkge1xuICAgIGNvbnN0IHRlbXAgPSAhdGhpcy5kYXRhLm1hcFN3aXRjaDtcbiAgICBjb25zdCBtYXJrZXJzID0gd3guZ2V0U3RvcmFnZVN5bmModGVtcCA/ICdiZW5idS1hbGwnIDogJ2ppbmd5dWUtYWxsJyk7XG5cbiAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgIG1hcFN3aXRjaDogdGVtcCxcbiAgICAgIG1hcmtlcnNcbiAgICB9KTtcbiAgICB0aGlzLm1hcEN0eCA9IHd4LmNyZWF0ZU1hcENvbnRleHQoJ3NjaG9vbE1hcCcpO1xuICAgIHRoaXMubWFwQ3R4LmluY2x1ZGVQb2ludHModGVtcCA/IGluY2x1ZGVQb2ludDEgOiBpbmNsdWRlUG9pbnQyKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMubWFwQ3R4LmdldFNjYWxlKHtcbiAgICAgICAgc3VjY2VzczogKHIxOiBhbnkpID0+IHtcbiAgICAgICAgICB0aGlzLm1hcEN0eC5nZXRDZW50ZXJMb2NhdGlvbih7XG4gICAgICAgICAgICBzdWNjZXNzOiAocjI6IGFueSkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLnNldERhdGEhKHsgbWFwOiB7IHNjYWxlOiByMS5zY2FsZSwgbGF0aXR1ZGU6IHIyLmxhdGl0dWRlLCBsb25naXR1ZGU6IHIyLmxvbmdpdHVkZSB9IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LCA1MDApO1xuICAgIHd4LnNldFN0b3JhZ2VTeW5jKCdtYXBTd2l0Y2gnLCB0ZW1wKTtcbiAgfSxcbiAgc2NhbGUoZTogYW55KSB7XG4gICAgdGhpcy5tYXBDdHguZ2V0Q2VudGVyTG9jYXRpb24oe1xuICAgICAgc3VjY2VzczogKHIyOiBhbnkpID0+IHtcbiAgICAgICAgdGhpcy5zZXREYXRhISh7XG4gICAgICAgICAgbWFwOiB7XG4gICAgICAgICAgICBzY2FsZTogdGhpcy5kYXRhLm1hcC5zY2FsZSArIChlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5hY3Rpb24gPT09ICdlbmxhcmdlJyA/IDEgOiAtMSksXG4gICAgICAgICAgICBsYXRpdHVkZTogcjIubGF0aXR1ZGUsIGxvbmdpdHVkZTogcjIubG9uZ2l0dWRlXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qXG4gICAgICogVGhpcy5tYXBDdHguZ2V0U2NhbGUoe1xuICAgICAqICAgc3VjY2VzcyhyMSkge1xuICAgICAqICAgICB0aGF0Lm1hcEN0eC5nZXRDZW50ZXJMb2NhdGlvbih7XG4gICAgICogICAgICAgc3VjY2VzcyhyMikge1xuICAgICAqICAgICAgICAgdGhhdC5zZXREYXRhKHtcbiAgICAgKiAgICAgICAgICAgbWFwOiB7XG4gICAgICogICAgICAgICAgICAgc2NhbGU6IHIxLnNjYWxlICsgKGUuY3VycmVudFRhcmdldC5kYXRhc2V0LmFjdGlvbiA9PSAnZW5sYXJnZScgPyAxIDogLTEpLFxuICAgICAqICAgICAgICAgICAgIGxhdGl0dWRlOiByMi5sYXRpdHVkZSxcbiAgICAgKiAgICAgICAgICAgICBsb25naXR1ZGU6IHIyLmxvbmdpdHVkZVxuICAgICAqICAgICAgICAgICB9XG4gICAgICogICAgICAgICB9KTtcbiAgICAgKiAgICAgICB9XG4gICAgICogICAgIH0pO1xuICAgICAqICAgfVxuICAgICAqIH0pO1xuICAgICAqL1xuICB9LFxuICBtb3ZlVG9Mb2NhdGlvbigpIHtcbiAgICB0aGlzLm1hcEN0eC5tb3ZlVG9Mb2NhdGlvbigpO1xuICB9LFxuICBwb2ludCgpIHtcbiAgICBpZiAodGhpcy5kYXRhLnBvaW50RGlzcGxheSkge1xuICAgICAgdGhpcy5zZXREYXRhISh7IHBvaW50RGlzcGxheTogIXRoaXMuZGF0YS5wb2ludERpc3BsYXkgfSk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgdGhpcy5zZXREYXRhISh7IHNlbGVjdEJvdHRvbTogYS5pbmZvLnNjcmVlbkhlaWdodCAvIGEuaW5mby5zY3JlZW5XaWR0aCAqIDc1MCB9KTtcbiAgICAgIH0sIDUwMCk7XG4gICAgfSBlbHNlXG4gICAgICB0aGlzLnNldERhdGEhKHtcbiAgICAgICAgcG9pbnREaXNwbGF5OiAhdGhpcy5kYXRhLnBvaW50RGlzcGxheSxcbiAgICAgICAgc2VsZWN0Qm90dG9tOiAxOTBcbiAgICAgIH0pO1xuXG4gIH0sXG4gIHNlbGVjdChlOiBhbnkpIHtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5kYXRhLm1hcFN3aXRjaCA/ICdiZW5idScgOiAnamluZ3l1ZSc7XG4gICAgY29uc3QgY3VycmVudCA9IGUudGFyZ2V0LmRhdGFzZXQuY2F0ZWdvcnk7XG4gICAgY29uc3QgbWFya2VycyA9IHd4LmdldFN0b3JhZ2VTeW5jKGAke25hbWV9LSR7Y3VycmVudH1gKTtcblxuICAgIHRoaXMuc2V0RGF0YSEoeyBtYXJrZXJzLCBzZWxlY3RJdGVtOiBjdXJyZW50IH0pO1xuICAgIHRoaXMubWFwQ3R4LmluY2x1ZGVQb2ludHMoeyBwYWRkaW5nOiBbMzAsIDIwLCAzMCwgMjBdLCBwb2ludHM6IG1hcmtlcnMgfSk7XG4gIH0sXG4gIG1hcmtlcnMoZTogYW55KSB7XG4gICAgY29uc3QgeyBtYXBTd2l0Y2ggfSA9IHRoaXMuZGF0YTtcbiAgICBjb25zdCB4aWFvcXUgPSBtYXBTd2l0Y2ggPyAnYmVuYnUnIDogJ2ppbmd5dWUnO1xuXG4gICAgaWYgKGUudHlwZSA9PT0gJ21hcmtlcnRhcCcpXG4gICAgICB0aGlzLiRwcmVsb2FkKGBzaXR1cz94aWFvcXU9JHt4aWFvcXV9JmFpbT0ke3hpYW9xdSArIGUubWFya2VySWR9YCk7XG4gICAgZWxzZSBpZiAoZS50eXBlID09PSAnY2FsbG91dHRhcCcpXG4gICAgICB0aGlzLiRyb3V0ZShgL2Z1bmN0aW9uL3NpdHVzP3hpYW9xdT0ke3hpYW9xdX0mYWltPSR7eGlhb3F1ICsgZS5tYXJrZXJJZH1gKTtcbiAgfSxcbiAgc2hvd0xpc3QoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5saXN0KSB7XG4gICAgICB0aGlzLnNldERhdGEhKHsgbGlzdDogIXRoaXMuZGF0YS5saXN0IH0pO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0RGF0YSEoeyBjbG9zZVRvcDogLTMxIH0pO1xuICAgICAgfSwgNTAwKTtcbiAgICB9IGVsc2VcbiAgICAgIHRoaXMuc2V0RGF0YSEoe1xuICAgICAgICBsaXN0OiAhdGhpcy5kYXRhLmxpc3QsXG4gICAgICAgIGNsb3NlVG9wOiBhLmluZm8uc3RhdHVzQmFySGVpZ2h0ICsgNS41XG4gICAgICB9KTtcblxuICB9LFxuICBiYWNrKCkge1xuICAgIHd4Lm5hdmlnYXRlQmFjayh7fSk7XG4gIH0sXG4gIHJlZ2lvbkNoYW5nZShlOiBhbnkpIHtcbiAgICBjb25zb2xlLmxvZygncmVnaW9uQ2hhbmdlJywgZSk7XG4gIH0sXG4gIHVwZGF0ZShlOiBhbnkpIHtcbiAgICBjb25zb2xlLmxvZygndXBkYXRlJywgZSk7XG4gIH1cblxuICAvKlxuICAgKiBVcGRhdGUoKSB7XG4gKiAgIGNvbnNvbGUubG9nKCd1cGRhdGUnKVxuICogICB0aGlzLm1hcEN0eC5nZXRTY2FsZSh7XG4gKiAgICAgc3VjY2VzczogZnVuY3Rpb24ocmVzKSB7XG4gKiAgICAgICBjb25zb2xlLmxvZygnZ2V0IHNjYWxlJyk7XG4gKiAgICAgICBjb25zb2xlLmxvZyhyZXMpO1xuICogICAgIH1cbiAqICAgfSk7XG4gKiAgIHRoaXMubWFwQ3R4LmdldENlbnRlckxvY2F0aW9uKHtcbiAqICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXMpIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdnZXRDZW50ZXJMb2NhdGlvbicpO1xuICogICAgICAgY29uc29sZS5sb2cocmVzKTtcbiAqICAgICB9XG4gKiAgIH0pO1xuICogfSxcbiAqIHJlZ2lvbkNoYW5nZShlKSB7XG4gKiBjb25zb2xlLmxvZygncmVnaW9uQ2hhbmdlJyk7XG4gKiBjb25zb2xlLmxvZyh0cmlnZ2VyKVxuICogaWYgKGUudHlwZSA9PSAnZW5kJyAmJiB0cmlnZ2VyKSB7XG4gKiAgIGNvbnNvbGUubG9nKCdmdWN0aW9uaW5nJyk7XG4gKiAgIHRyaWdnZXIgPSBmYWxzZTtcbiAqICAgY29uc29sZS5sb2codHJpZ2dlcik7XG4gKiAgIGxldCB0aGF0ID0gdGhpcyxcbiAqICAgICBtYXAgPSB0aGlzLmRhdGEubWFwO1xuICogICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICogICAgIHRyaWdnZXIgPSB0cnVlO1xuICogICAgIGNvbnNvbGUubG9nKFwidHJ1ZVwiKVxuICogICAgIGNvbnNvbGUubG9nKHRyaWdnZXIpXG4gKiAgIH0sIDUwMClcbiAqICAgdmFyIHJlZ2lvbkNoYW5nZTtcbiAqICAgdGhpcy5tYXBDdHguZ2V0U2NhbGUoe1xuICogICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uKHJlcykge1xuICogICAgICAgbWFwLnNjYWxlID0gcmVzLnNjYWxlO1xuICogICAgICAgY29uc29sZS5sb2coJ3NjYWxlJyArIHJlcy5zY2FsZSk7XG4gKiAgICAgICByZWdpb25DaGFuZ2UgPSB0cnVlO1xuICogICAgIH1cbiAqICAgfSk7XG4gKiAgIHRoaXMubWFwQ3R4LmdldENlbnRlckxvY2F0aW9uKHtcbiAqICAgICBzdWNjZXNzOiBmdW5jdGlvbihyZXMpIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKHJlcyk7XG4gKiAgICAgICBjb25zb2xlLmxvZygnZGlzdGFuY2UgaXMnICsgdS5nRChtYXAubGF0aXR1ZGUsIG1hcC5sb25naXR1ZGUsIHJlcy5sYXRpdHVkZSwgcmVzLmxvbmdpdHVkZSkpXG4gKiAgICAgICBpZiAocmVnaW9uQ2hhbmdlICYmICh1LmdEKG1hcC5sYXRpdHVkZSwgbWFwLmxvbmdpdHVkZSwgcmVzLmxhdGl0dWRlLCByZXMubG9uZ2l0dWRlKSA+IDEpKSB7XG4gKiAgICAgICAgIG1hcC5sYXRpdHVkZSA9IHJlcy5sYXRpdHVkZTtcbiAqICAgICAgICAgbWFwLmxvbmdpdHVkZSA9IHJlcy5sb25naXR1ZGU7XG4gKiAgICAgICAgIHRoYXQuc2V0RGF0YSh7XG4gKiAgICAgICAgICAgbWFwOiBtYXBcbiAqICAgICAgICAgfSk7XG4gKiAgICAgICB9O1xuICogICAgICAgcmVnaW9uQ2hhbmdlID0gZmFsc2U7XG4gKiAgICAgfVxuICogICB9KTtcbiAqIH1cbiAqIH0sXG4gKiB0cmFuc2xhdGVNYXJrZXI6IGZ1bmN0aW9uKCkge1xuICogICB0aGlzLm1hcEN0eC50cmFuc2xhdGVNYXJrZXIoe1xuICogICAgIG1hcmtlcklkOiAwLFxuICogICAgIGF1dG9Sb3RhdGU6IHRydWUsXG4gKiAgICAgZHVyYXRpb246IDEwMDAsXG4gKiAgICAgZGVzdGluYXRpb246IHtcbiAqICAgICAgIGxhdGl0dWRlOiAyMy4xMDIyOSxcbiAqICAgICAgIGxvbmdpdHVkZTogMTEzLjMzNDUyMTEsXG4gKiAgICAgfSxcbiAqICAgICBhbmltYXRpb25FbmQoKSB7XG4gKiAgICAgICBjb25zb2xlLmxvZygnYW5pbWF0aW9uIGVuZCcpXG4gKiAgICAgfVxuICogICB9KVxuICogfSxcbiAqL1xuICAvKlxuICAqIFJlZ2lvbkNoYW5nZSgpIHsgfSxcbiAgICogdXBkYXRlKCkgeyB9XG4gICAgKi9cbn0pO1xuIl19