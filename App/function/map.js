"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var wxpage_1 = require("wxpage");
var page_1 = require("../utils/page");
var tab_1 = require("../utils/tab");
var a = getApp().globalData;
var includePoint1 = {
    padding: [30, 20, 30, 20],
    points: [
        { latitude: 43.8578480844, longitude: 125.3252720833 },
        { latitude: 43.8633404949, longitude: 125.3379964828 }
    ]
};
var includePoint2 = {
    padding: [30, 20, 30, 20],
    points: [
        { latitude: 43.8256570334, longitude: 125.4175829887 },
        { latitude: 43.8247281876, longitude: 125.4359936714 }
    ]
};
wxpage_1.default('map', {
    data: {
        nm: a.nm,
        map: {
            latitude: 43.862007982140646,
            longitude: 125.33405307523934,
            scale: 17
        },
        list: false,
        pointDisplay: false,
        closeTop: -31,
        selectBottom: 0,
        selectItem: 'all',
        category: [
            ['全部', 'all'],
            ['校门', 'gate'],
            ['学院', 'school'],
            ['建筑', 'buildings'],
            ['寝室', 'dormitory'],
            ['设施', 'facility'],
            ['运动场', 'sportsField'],
            ['风景', 'scenery']
        ]
    },
    onNavigate: function () {
        console.log('将要跳转Map');
        tab_1.default.markerSet();
        a.marker = this.getMarker();
    },
    onLoad: function () {
        var _this = this;
        wx.showLoading({ title: '加载中...' });
        tab_1.default.markerSet();
        var _a = a.marker ? a.marker : this.getMarker(), mapSwitch = _a.mapSwitch, markers = _a.markers;
        delete a.marker;
        this.setData({
            mapSwitch: mapSwitch,
            markers: markers,
            info: a.info,
            mapStyle: a.nm ? '46NBZ-EJ6C4-4REUO-XR7ZR-CWLG5-T3BDA' : 'PZGBZ-74N6F-KVYJ5-NRJDH-Y3NUT-IKFLF',
            nm: a.nm
        });
        this.mapCtx = wx.createMapContext('schoolMap');
        this.mapCtx.includePoints(mapSwitch ? includePoint1 : includePoint2);
        setTimeout(function () {
            _this.mapCtx.getScale({
                success: function (r1) {
                    _this.mapCtx.getCenterLocation({
                        success: function (r2) {
                            _this.setData({ map: { scale: r1.scale, latitude: r2.latitude, longitude: r2.longitude } });
                        }
                    });
                }
            });
            wx.hideLoading();
        }, 500);
        page_1.default.Notice('map');
    },
    onShow: function () {
        var _a = page_1.default.color(false), nc = _a.nc, bc = _a.bc;
        wx.setNavigationBarColor(nc);
        wx.setBackgroundColor(bc);
    },
    onReady: function () {
        var _this = this;
        wx.createSelectorQuery().select('#mapTab')
            .boundingClientRect(function (rect) {
            _this.setData({ tabHeight: rect.height });
        })
            .exec();
    },
    getMarker: function () {
        var value = wx.getStorageSync('mapSwitch');
        var mapSwitch = value || value === false ? value : (wx.setStorageSync('mapSwitch', true), true);
        var markers = wx.getStorageSync(mapSwitch ? 'benbu-all' : 'jingyue-all');
        return { mapSwitch: mapSwitch, markers: markers };
    },
    Switch: function () {
        var _this = this;
        var temp = !this.data.mapSwitch;
        var markers = wx.getStorageSync(temp ? 'benbu-all' : 'jingyue-all');
        this.setData({
            mapSwitch: temp,
            markers: markers
        });
        this.mapCtx = wx.createMapContext('schoolMap');
        this.mapCtx.includePoints(temp ? includePoint1 : includePoint2);
        setTimeout(function () {
            _this.mapCtx.getScale({
                success: function (r1) {
                    _this.mapCtx.getCenterLocation({
                        success: function (r2) {
                            _this.setData({ map: { scale: r1.scale, latitude: r2.latitude, longitude: r2.longitude } });
                        }
                    });
                }
            });
        }, 500);
        wx.setStorageSync('mapSwitch', temp);
    },
    scale: function (e) {
        var _this = this;
        this.mapCtx.getCenterLocation({
            success: function (r2) {
                _this.setData({
                    map: {
                        scale: _this.data.map.scale + (e.currentTarget.dataset.action === 'enlarge' ? 1 : -1),
                        latitude: r2.latitude, longitude: r2.longitude
                    }
                });
            }
        });
    },
    moveToLocation: function () {
        this.mapCtx.moveToLocation();
    },
    point: function () {
        var _this = this;
        if (this.data.pointDisplay) {
            this.setData({ pointDisplay: !this.data.pointDisplay });
            setTimeout(function () {
                _this.setData({ selectBottom: a.info.screenHeight / a.info.screenWidth * 750 });
            }, 500);
        }
        else
            this.setData({
                pointDisplay: !this.data.pointDisplay,
                selectBottom: 190
            });
    },
    select: function (e) {
        var name = this.data.mapSwitch ? 'benbu' : 'jingyue';
        var current = e.target.dataset.category;
        var markers = wx.getStorageSync(name + "-" + current);
        this.setData({ markers: markers, selectItem: current });
        this.mapCtx.includePoints({ padding: [30, 20, 30, 20], points: markers });
    },
    markers: function (e) {
        var mapSwitch = this.data.mapSwitch;
        var xiaoqu = mapSwitch ? 'benbu' : 'jingyue';
        if (e.type === 'markertap')
            this.$preload("situs?xiaoqu=" + xiaoqu + "&aim=" + (xiaoqu + e.markerId));
        else if (e.type === 'callouttap')
            this.$route("/function/situs?xiaoqu=" + xiaoqu + "&aim=" + (xiaoqu + e.markerId));
    },
    showList: function () {
        var _this = this;
        if (this.data.list) {
            this.setData({ list: !this.data.list });
            setTimeout(function () {
                _this.setData({ closeTop: -31 });
            }, 500);
        }
        else
            this.setData({
                list: !this.data.list,
                closeTop: a.info.statusBarHeight + 5.5
            });
    },
    back: function () {
        wx.navigateBack({});
    },
    regionChange: function (e) {
        console.log('regionChange', e);
    },
    update: function (e) {
        console.log('update', e);
    }
});
//# sourceMappingURL=data:application/json;base64,